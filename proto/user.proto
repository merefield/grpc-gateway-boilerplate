syntax="proto3";

//package example;
package resonate.api.user;

//option go_package = "user";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tag.proto";

// Defines the import path that should be used to import the generated package,
// and the package name.
option go_package = "github.com/merefield/grpc-user-api/proto;user";

// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0";
  };
  external_docs: {
    url: "https://github.com/merefield/grpc-user-api";
    description: "gRPC-gateway resonate-user-api repository";
  }
  schemes: HTTPS;
};

service UserService {

  //rpc AddUser(AddUserRequest) returns (User) {
  rpc AddUser(AddUserRequest) returns (User) {
    option (google.api.http) = {
      // Route to this method from POST requests to /api/v1/users
      post: "/api/v1/users"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add a user"
      description: "Add a user to the server."
      tags: "Users"
    };
  }
  //rpc AddUser(AddUserRequest) returns (User) {
  rpc UpdateUser(UpdateUserRequest) returns (User) {
    option (google.api.http) = {
      // Route to this method from POST requests to /api/v1/users
      post: "/api/v1/users"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add a user"
      description: "Add a user to the server."
      tags: "Users"
    };
  }
  rpc GetUser(GetUserRequest) returns (User) {
    option (google.api.http) = {
      // Route to this method from POST requests to /api/v1/users
      get: "/api/v1/user/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a user"
      description: "Get a user from the server."
      tags: "Users"
    };
  }
  rpc ListUsers(ListUsersRequest) returns (stream User) {
    option (google.api.http) = {
      // Route to this method from GET requests to /api/v1/users
      get: "/api/v1/users"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List users"
      description: "List all users on the server."
      tags: "Users"
    };
  }
}

message GetUserRequest {
  string id = 1;
}

message UpdateUserRequest {
  string id = 1; // required
  string username = 2; // required
  string email = 3; // required
  string display_name = 4; // required TODO remove
  string full_name = 5; // required
  string first_name = 6;
  string last_name = 7;
  bool member = 8;
  bytes avatar = 9;
  bool newsletter_notification = 10;
  repeated string favorite_tracks = 11;
  repeated string followed_groups = 12;
  repeated RelatedUserGroup owner_of_groups = 13;
  StreetAddress residence_address = 14;
}

message AddUserRequest {
  string username = 1; // required
  string email = 2; // required
  string display_name = 3; // required TODO remove
  string full_name = 4; // required
  string first_name = 5;
  string last_name = 6;
  bool member = 7;
  bytes avatar = 8;
  bool newsletter_notification = 9;
  repeated string favorite_tracks = 10;
  repeated string followed_groups = 11;
  repeated RelatedUserGroup owner_of_groups = 12;
  StreetAddress residence_address = 13;
}

message ListUsersRequest {}

// message User {
//   string id = 1;
// }

// syntax = "proto3";


// option go_package = "user";

// import "user-api/rpc/track/service.proto";


// service UserService {
//   rpc AddUser(User) returns (User);
//   rpc GetUser(User) returns (User);
//   rpc UpdateUser(User) returns (Empty);
//   rpc DeleteUser(User) returns (Empty);
//   rpc FollowGroup(UserToUserGroup) returns (Empty);
//   rpc UnfollowGroup(UserToUserGroup) returns (Empty);
//   // rpc AddFavoriteTrack(UserToTrack) returns (Empty);
//   // rpc RemoveFavoriteTrack(UserToTrack) returns (Empty);

//   // User Library
//   // rpc GetPlaylists(User) returns (Playlists);
//   // rpc GetFavoriteTracks(User) returns (Tracks);
//   // rpc GetOwnedTracks(User) returns (Tracks);
//   // rpc GetTrackHistory(User) returns (Tracks);

//   // rpc GetSupportedArtists(User) returns (Artists);
//   // rpc CreatePlay(CreatePlayRequest) returns (CreatePlayResponse); Payment API
// }

message User {
  string id = 1; // required
  string username = 2; // required
  string email = 3; // required
  string display_name = 4; // required TODO remove
  string full_name = 5; // required
  string first_name = 6;
  string last_name = 7;
  bool member = 8;
  bytes avatar = 9;
  bool newsletter_notification = 10;
  repeated string favorite_tracks = 11;
  repeated string followed_groups = 12;
  repeated RelatedUserGroup owner_of_groups = 13;
  StreetAddress residence_address = 14;
}

// message Playlists {
//   repeated RelatedTrackGroup playlists = 1;
// }

// message Tracks {
//   repeated Track tracks = 1;
// }

message StreetAddress {
  string id = 1;
  map<string, string> data = 2;
  bool personal_data = 3;
}

// message Artists {
//   repeated RelatedUserGroup artists = 1;
// }

// Used for:
// - following/unfollowing group
// message UserToUserGroup {
//   string user_id = 1; // required
//   string user_group_id = 2; // required
// }

// Used for:
// - adding/removing favorite tracks
// message UserToTrack {
//   string user_id = 1; // required
//   string track_id = 2; // required
// }

// Used for:
// - adding a track play (i.e. track has been streamed >=45s)
// message Play {
//   string user_id = 1; // required
//   string track_id = 2; // required
//   string type = 3; // required
//   float credits = 4; // credits spent by user
// }

// message CreatePlayRequest {
//   Play play = 1; // required
//   float updated_credits = 2; // required
// }

// message CreatePlayResponse {
//   int32 updated_play_count = 1; // required
//   float updated_credits = 2; // required
// }

