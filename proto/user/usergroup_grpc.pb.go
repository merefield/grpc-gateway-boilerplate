// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UserGroupServiceClient is the client API for UserGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserGroupServiceClient interface {
	CreateUserGroup(ctx context.Context, in *UserGroupCreateRequest, opts ...grpc.CallOption) (*UserGroupPrivateResponse, error)
	GetUserGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*UserGroupPublicResponse, error)
	GetUserGroupRestricted(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*UserGroupPrivateResponse, error)
	UpdateUserGroup(ctx context.Context, in *UserGroupUpdateRequest, opts ...grpc.CallOption) (*UserGroupPrivateResponse, error)
	DeleteUserGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*Empty, error)
	GetChildUserGroups(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*GroupedUserGroups, error)
	GetParentUserGroups(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*GroupedUserGroups, error)
	AddMember(ctx context.Context, in *UserGroupMembershipRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteMember(ctx context.Context, in *UserGroupMembershipRequest, opts ...grpc.CallOption) (*Empty, error)
	SearchUserGroups(ctx context.Context, in *Query, opts ...grpc.CallOption) (*SearchResults, error)
}

type userGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserGroupServiceClient(cc grpc.ClientConnInterface) UserGroupServiceClient {
	return &userGroupServiceClient{cc}
}

func (c *userGroupServiceClient) CreateUserGroup(ctx context.Context, in *UserGroupCreateRequest, opts ...grpc.CallOption) (*UserGroupPrivateResponse, error) {
	out := new(UserGroupPrivateResponse)
	err := c.cc.Invoke(ctx, "/user.UserGroupService/CreateUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupServiceClient) GetUserGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*UserGroupPublicResponse, error) {
	out := new(UserGroupPublicResponse)
	err := c.cc.Invoke(ctx, "/user.UserGroupService/GetUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupServiceClient) GetUserGroupRestricted(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*UserGroupPrivateResponse, error) {
	out := new(UserGroupPrivateResponse)
	err := c.cc.Invoke(ctx, "/user.UserGroupService/GetUserGroupRestricted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupServiceClient) UpdateUserGroup(ctx context.Context, in *UserGroupUpdateRequest, opts ...grpc.CallOption) (*UserGroupPrivateResponse, error) {
	out := new(UserGroupPrivateResponse)
	err := c.cc.Invoke(ctx, "/user.UserGroupService/UpdateUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupServiceClient) DeleteUserGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/user.UserGroupService/DeleteUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupServiceClient) GetChildUserGroups(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*GroupedUserGroups, error) {
	out := new(GroupedUserGroups)
	err := c.cc.Invoke(ctx, "/user.UserGroupService/GetChildUserGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupServiceClient) GetParentUserGroups(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*GroupedUserGroups, error) {
	out := new(GroupedUserGroups)
	err := c.cc.Invoke(ctx, "/user.UserGroupService/GetParentUserGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupServiceClient) AddMember(ctx context.Context, in *UserGroupMembershipRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/user.UserGroupService/AddMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupServiceClient) DeleteMember(ctx context.Context, in *UserGroupMembershipRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/user.UserGroupService/DeleteMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupServiceClient) SearchUserGroups(ctx context.Context, in *Query, opts ...grpc.CallOption) (*SearchResults, error) {
	out := new(SearchResults)
	err := c.cc.Invoke(ctx, "/user.UserGroupService/SearchUserGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserGroupServiceServer is the server API for UserGroupService service.
// All implementations should embed UnimplementedUserGroupServiceServer
// for forward compatibility
type UserGroupServiceServer interface {
	CreateUserGroup(context.Context, *UserGroupCreateRequest) (*UserGroupPrivateResponse, error)
	GetUserGroup(context.Context, *UserGroupRequest) (*UserGroupPublicResponse, error)
	GetUserGroupRestricted(context.Context, *UserGroupRequest) (*UserGroupPrivateResponse, error)
	UpdateUserGroup(context.Context, *UserGroupUpdateRequest) (*UserGroupPrivateResponse, error)
	DeleteUserGroup(context.Context, *UserGroupRequest) (*Empty, error)
	GetChildUserGroups(context.Context, *UserGroupRequest) (*GroupedUserGroups, error)
	GetParentUserGroups(context.Context, *UserGroupRequest) (*GroupedUserGroups, error)
	AddMember(context.Context, *UserGroupMembershipRequest) (*Empty, error)
	DeleteMember(context.Context, *UserGroupMembershipRequest) (*Empty, error)
	SearchUserGroups(context.Context, *Query) (*SearchResults, error)
}

// UnimplementedUserGroupServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserGroupServiceServer struct {
}

func (UnimplementedUserGroupServiceServer) CreateUserGroup(context.Context, *UserGroupCreateRequest) (*UserGroupPrivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserGroup not implemented")
}
func (UnimplementedUserGroupServiceServer) GetUserGroup(context.Context, *UserGroupRequest) (*UserGroupPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroup not implemented")
}
func (UnimplementedUserGroupServiceServer) GetUserGroupRestricted(context.Context, *UserGroupRequest) (*UserGroupPrivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroupRestricted not implemented")
}
func (UnimplementedUserGroupServiceServer) UpdateUserGroup(context.Context, *UserGroupUpdateRequest) (*UserGroupPrivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserGroup not implemented")
}
func (UnimplementedUserGroupServiceServer) DeleteUserGroup(context.Context, *UserGroupRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserGroup not implemented")
}
func (UnimplementedUserGroupServiceServer) GetChildUserGroups(context.Context, *UserGroupRequest) (*GroupedUserGroups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildUserGroups not implemented")
}
func (UnimplementedUserGroupServiceServer) GetParentUserGroups(context.Context, *UserGroupRequest) (*GroupedUserGroups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParentUserGroups not implemented")
}
func (UnimplementedUserGroupServiceServer) AddMember(context.Context, *UserGroupMembershipRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedUserGroupServiceServer) DeleteMember(context.Context, *UserGroupMembershipRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedUserGroupServiceServer) SearchUserGroups(context.Context, *Query) (*SearchResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserGroups not implemented")
}

// UnsafeUserGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserGroupServiceServer will
// result in compilation errors.
type UnsafeUserGroupServiceServer interface {
	mustEmbedUnimplementedUserGroupServiceServer()
}

func RegisterUserGroupServiceServer(s grpc.ServiceRegistrar, srv UserGroupServiceServer) {
	s.RegisterService(&_UserGroupService_serviceDesc, srv)
}

func _UserGroupService_CreateUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServiceServer).CreateUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserGroupService/CreateUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServiceServer).CreateUserGroup(ctx, req.(*UserGroupCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupService_GetUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServiceServer).GetUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserGroupService/GetUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServiceServer).GetUserGroup(ctx, req.(*UserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupService_GetUserGroupRestricted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServiceServer).GetUserGroupRestricted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserGroupService/GetUserGroupRestricted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServiceServer).GetUserGroupRestricted(ctx, req.(*UserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupService_UpdateUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServiceServer).UpdateUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserGroupService/UpdateUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServiceServer).UpdateUserGroup(ctx, req.(*UserGroupUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupService_DeleteUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServiceServer).DeleteUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserGroupService/DeleteUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServiceServer).DeleteUserGroup(ctx, req.(*UserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupService_GetChildUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServiceServer).GetChildUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserGroupService/GetChildUserGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServiceServer).GetChildUserGroups(ctx, req.(*UserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupService_GetParentUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServiceServer).GetParentUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserGroupService/GetParentUserGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServiceServer).GetParentUserGroups(ctx, req.(*UserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupService_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServiceServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserGroupService/AddMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServiceServer).AddMember(ctx, req.(*UserGroupMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupService_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServiceServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserGroupService/DeleteMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServiceServer).DeleteMember(ctx, req.(*UserGroupMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupService_SearchUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServiceServer).SearchUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserGroupService/SearchUserGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServiceServer).SearchUserGroups(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserGroupService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserGroupService",
	HandlerType: (*UserGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserGroup",
			Handler:    _UserGroupService_CreateUserGroup_Handler,
		},
		{
			MethodName: "GetUserGroup",
			Handler:    _UserGroupService_GetUserGroup_Handler,
		},
		{
			MethodName: "GetUserGroupRestricted",
			Handler:    _UserGroupService_GetUserGroupRestricted_Handler,
		},
		{
			MethodName: "UpdateUserGroup",
			Handler:    _UserGroupService_UpdateUserGroup_Handler,
		},
		{
			MethodName: "DeleteUserGroup",
			Handler:    _UserGroupService_DeleteUserGroup_Handler,
		},
		{
			MethodName: "GetChildUserGroups",
			Handler:    _UserGroupService_GetChildUserGroups_Handler,
		},
		{
			MethodName: "GetParentUserGroups",
			Handler:    _UserGroupService_GetParentUserGroups_Handler,
		},
		{
			MethodName: "AddMember",
			Handler:    _UserGroupService_AddMember_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _UserGroupService_DeleteMember_Handler,
		},
		{
			MethodName: "SearchUserGroups",
			Handler:    _UserGroupService_SearchUserGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/usergroup.proto",
}
